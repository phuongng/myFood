{"ast":null,"code":"var _jsxFileName = \"/Users/phuongnguyen/Desktop/Visual Studio Code/myFood/src/components/Cart/Checkout.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from 'react';\nimport styles from './Checkout.module.css'; // get value and return true if value is empty. \n//using \"trim\" (white space) to check if the input is empty\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst isEmpty = value => value.trim() === ''; //to check if the input have 5 characters for the zip code\n\n\nconst isFiveChars = value => value.trim().length === 5;\n\nconst Checkout = props => {\n  _s();\n\n  const [formInputsValidity, setFormInputsValidity] = useState({\n    name: true,\n    street: true,\n    city: true,\n    postalCode: true\n  });\n  const nameInputRef = useRef();\n  const streetInputRef = useRef();\n  const postalCodeInputRef = useRef();\n  const cityInputRef = useRef();\n\n  const confirmHandler = event => {\n    event.preventDefault(); // the \"current\" will give you access to the actual value stored\n    // in the ref, this this case, it's the input element\n\n    const enteredName = nameInputRef.current.value;\n    const enteredStreet = streetInputRef.current.value;\n    const enteredPostalCode = postalCodeInputRef.current.value;\n    const enteredCity = cityInputRef.current.value;\n    const enteredNameIsValid = !isEmpty(enteredName);\n    const enteredStreetIsValid = !isEmpty(enteredStreet);\n    const enteredCityIsValid = !isEmpty(enteredCity);\n    const enteredPostalCodeIsValid = isFiveChars(enteredPostalCode);\n    setFormInputsValidity({\n      name: enteredNameIsValid,\n      street: enteredStreetIsValid,\n      city: enteredCityIsValid,\n      postalCode: enteredPostalCodeIsValid\n    });\n    const formIsValid = enteredNameIsValid && enteredStreetIsValid && enteredCityIsValid && enteredPostalCodeIsValid;\n\n    if (!formIsValid) {\n      return;\n    } // Submit cart data\n\n  };\n\n  const nameControlClasses = `${styles.control} \n  ${formInputsValidity.name ? '' : styles.invalid}`;\n  const streetControlClasses = `${styles.control} \n  ${formInputsValidity.street ? '' : styles.invalid}`;\n  const postalCodeControlClasses = `${styles.control} \n  ${formInputsValidity.postalCode ? '' : styles.invalid}`;\n  const cityControlClasses = `${styles.control} \n  ${formInputsValidity.city ? '' : styles.invalid}`;\n  return (\n    /*#__PURE__*/\n    // onSubmit: when click on Submit button, the data will be sent\n    _jsxDEV(\"form\", {\n      className: styles.form,\n      onSubmit: confirmHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: nameControlClasses,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"Your Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          ref: nameInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 9\n        }, this), !formInputsValidity.name && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please enter your name! \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 38\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: streetControlClasses,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"street\",\n          children: \" Street\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"street\",\n          ref: streetInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }, this), !formInputsValidity.street && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please enter a valid street! \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 40\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: postalCodeControlClasses,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"postal\",\n          children: \" Postal Code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"postal\",\n          ref: postalCodeInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }, this), !formInputsValidity.postalCode && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please enter a valid postal code (5 characters long)! \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 12\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: cityControlClasses,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"city\",\n          children: \" City\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"city\",\n          ref: cityInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }, this), !formInputsValidity.city && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please enter a valid city! \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 38\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.actions,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: props.onCancel,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.submit,\n          children: \"Confirm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(Checkout, \"mZCsAtBIFQjke8GBuQYAXPOOADw=\");\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"sources":["/Users/phuongnguyen/Desktop/Visual Studio Code/myFood/src/components/Cart/Checkout.js"],"names":["useRef","useState","styles","isEmpty","value","trim","isFiveChars","length","Checkout","props","formInputsValidity","setFormInputsValidity","name","street","city","postalCode","nameInputRef","streetInputRef","postalCodeInputRef","cityInputRef","confirmHandler","event","preventDefault","enteredName","current","enteredStreet","enteredPostalCode","enteredCity","enteredNameIsValid","enteredStreetIsValid","enteredCityIsValid","enteredPostalCodeIsValid","formIsValid","nameControlClasses","control","invalid","streetControlClasses","postalCodeControlClasses","cityControlClasses","form","actions","onCancel","submit"],"mappings":"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","sourcesContent":["import { useRef, useState } from 'react';\nimport styles from './Checkout.module.css';\n\n\n// get value and return true if value is empty. \n//using \"trim\" (white space) to check if the input is empty\nconst isEmpty = (value) => value.trim() === '';\n\n//to check if the input have 5 characters for the zip code\nconst isFiveChars = (value) => value.trim().length === 5;\n\nconst Checkout = (props) => {\n  const [formInputsValidity, setFormInputsValidity] = useState({\n    name: true,\n    street: true,\n    city: true,\n    postalCode: true,\n  });\n\n  const nameInputRef = useRef();\n  const streetInputRef = useRef();\n  const postalCodeInputRef = useRef();\n  const cityInputRef = useRef();\n\n  const confirmHandler = (event) => {\n    event.preventDefault();\n\n    // the \"current\" will give you access to the actual value stored\n    // in the ref, this this case, it's the input element\n    const enteredName = nameInputRef.current.value;\n    const enteredStreet = streetInputRef.current.value;\n    const enteredPostalCode = postalCodeInputRef.current.value;\n    const enteredCity = cityInputRef.current.value;\n\n    const enteredNameIsValid = !isEmpty(enteredName);\n    const enteredStreetIsValid = !isEmpty(enteredStreet);\n    const enteredCityIsValid = !isEmpty(enteredCity);\n    const enteredPostalCodeIsValid = isFiveChars(enteredPostalCode);\n\n    setFormInputsValidity({\n      name: enteredNameIsValid,\n      street: enteredStreetIsValid,\n      city: enteredCityIsValid,\n      postalCode: enteredPostalCodeIsValid,\n    });\n\n    const formIsValid =\n      enteredNameIsValid &&\n      enteredStreetIsValid &&\n      enteredCityIsValid &&\n      enteredPostalCodeIsValid;\n\n    if (!formIsValid) {\n      return;\n    }\n\n    // Submit cart data\n  };\n\n\n  const nameControlClasses = `${styles.control} \n  ${formInputsValidity.name ? '' : styles.invalid}`;\n\n  const streetControlClasses = `${styles.control} \n  ${formInputsValidity.street ? '' : styles.invalid}`;\n\n  const postalCodeControlClasses = `${styles.control} \n  ${formInputsValidity.postalCode ? '' : styles.invalid}`;\n\n  const cityControlClasses = `${styles.control} \n  ${formInputsValidity.city ? '' : styles.invalid}`;\n\n  return (\n    // onSubmit: when click on Submit button, the data will be sent\n    <form className={styles.form} onSubmit={confirmHandler}>\n      <div className={nameControlClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input type='text' id='name' ref={nameInputRef} />\n        {/* if the form input validity is not true then \n        => message: please enter your name */}\n        {!formInputsValidity.name && <p>Please enter your name! </p>}\n      </div>\n\n      <div className={streetControlClasses}>\n        <label htmlFor='street'> Street</label>\n        <input type='text' id='street' ref={streetInputRef} />\n        {!formInputsValidity.street && <p>Please enter a valid street! </p>}\n      </div>\n\n      <div className={postalCodeControlClasses}>\n        <label htmlFor='postal'> Postal Code</label>\n        <input type='text' id='postal' ref={postalCodeInputRef} />\n        {!formInputsValidity.postalCode &&\n          (<p>Please enter a valid postal code (5 characters long)! </p>)}\n      </div>\n\n      <div className={cityControlClasses}>\n        <label htmlFor='city'> City</label>\n        <input type='text' id='city' ref={cityInputRef} />\n        {!formInputsValidity.city && <p>Please enter a valid city! </p>}\n      </div>\n\n      <div className={styles.actions}>\n        <button type='button' onClick={props.onCancel}>\n          Cancel\n        </button>\n        <button className={styles.submit}>Confirm</button>\n      </div>\n    </form>\n  );\n};\n\nexport default Checkout;"]},"metadata":{},"sourceType":"module"}