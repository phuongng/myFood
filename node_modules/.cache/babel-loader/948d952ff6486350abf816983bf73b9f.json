{"ast":null,"code":"var _jsxFileName = \"/Users/phuongnguyen/Desktop/Visual Studio Code/myFood/src/components/Cart/Checkout.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from 'react';\nimport styles from './Checkout.module.css'; // get value and return true if value is empty. \n//using \"trim\" (white space) to check if the input is empty\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst isEmpty = value => value.trim() === ''; //to check if the input have 5 characters for the zip code\n\n\nconst isFiveChars = value => value.trim().length === 5;\n\nconst Checkout = props => {\n  _s();\n\n  const [formInputValidity, setFormInputValidity] = useState({\n    name: true,\n    street: true,\n    city: true,\n    postalCode: true\n  });\n  const nameInputRef = useRef();\n  const streetInputRef = useRef();\n  const postalInputRef = useRef();\n  const cityInputRef = useRef();\n\n  const confirmHandler = event => {\n    event.preventDefault(); // the \"current\" will give you access to the actual value stored\n    // in the ref, this this case, it's the input element\n\n    const enteredName = nameInputRef.current.value;\n    const enteredStreet = streetInputRef.current.value;\n    const enteredPostalCode = postalInputRef.current.value;\n    const enteredCity = cityInputRef.current.value;\n    const enteredNameIsValid = !isEmpty(enteredName);\n    const enteredStreetIsValid = !isEmpty(enteredStreet);\n    const enteredPostalCodeIsValid = !isFiveChars(enteredPostalCode);\n    const enteredCityIsValid = !isEmpty(enteredCity);\n    setFormInputValidity({\n      name: enteredNameIsValid,\n      street: enteredStreetIsValid,\n      city: enteredCityIsValid,\n      postal: enteredPostalCodeIsValid\n    });\n    const formIsValid = enteredNameIsValid && enteredStreetIsValid && enteredPostalCodeIsValid && enteredCityIsValid;\n\n    if (formIsValid) {\n      return;\n    } //submit the cart data \n\n  };\n\n  const nameControlClasses = `${styles.control} \n  ${formInputValidity.name ? '' : styles.invalid}`;\n  const streetControlClasses = `${styles.control} \n  ${formInputValidity.street ? '' : styles.invalid}`;\n  const postalCodeControlClasses = `${styles.control} \n  ${formInputValidity.postalCode ? '' : styles.invalid}`;\n  const cityControlClasses = `${styles.control} \n  ${formInputValidity.city ? '' : styles.invalid}`;\n  return (\n    /*#__PURE__*/\n    // onSubmit: when click on Submit button, the data will be sent\n    _jsxDEV(\"form\", {\n      className: styles.form,\n      onSubmit: confirmHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: nameControlClasses,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"Your Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          ref: nameInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }, this), !formInputValidity.name && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please enter your name! \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: streetControlClasses,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"street\",\n          children: \" Street\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"street\",\n          ref: streetInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }, this), !formInputValidity.street && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please enter a valid street! \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 39\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: postalCodeControlClasses,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"postal\",\n          children: \" Postal Code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"postal\",\n          ref: postalInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 9\n        }, this), !formInputValidity.postalCode && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please enter a valid postal code (5 characters long)! \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: cityControlClasses,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"city\",\n          children: \" City\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"city\",\n          ref: cityInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 9\n        }, this), !formInputValidity.city && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please enter a valid city! \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.actions,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: props.onCancel,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Confirm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(Checkout, \"OrMIxrf5SYM2iM/wUSVUdud1UPA=\");\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"sources":["/Users/phuongnguyen/Desktop/Visual Studio Code/myFood/src/components/Cart/Checkout.js"],"names":["useRef","useState","styles","isEmpty","value","trim","isFiveChars","length","Checkout","props","formInputValidity","setFormInputValidity","name","street","city","postalCode","nameInputRef","streetInputRef","postalInputRef","cityInputRef","confirmHandler","event","preventDefault","enteredName","current","enteredStreet","enteredPostalCode","enteredCity","enteredNameIsValid","enteredStreetIsValid","enteredPostalCodeIsValid","enteredCityIsValid","postal","formIsValid","nameControlClasses","control","invalid","streetControlClasses","postalCodeControlClasses","cityControlClasses","form","actions","onCancel"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,OAAjC;AAEA,OAAOC,MAAP,MAAmB,uBAAnB,C,CAGA;AACA;;;;AACA,MAAMC,OAAO,GAAIC,KAAD,IAAWA,KAAK,CAACC,IAAN,OAAiB,EAA5C,C,CAEA;;;AACA,MAAMC,WAAW,GAAIF,KAAD,IAAWA,KAAK,CAACC,IAAN,GAAaE,MAAb,KAAwB,CAAvD;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAC1B,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CV,QAAQ,CAAC;AACzDW,IAAAA,IAAI,EAAE,IADmD;AAEzDC,IAAAA,MAAM,EAAE,IAFiD;AAGzDC,IAAAA,IAAI,EAAE,IAHmD;AAIzDC,IAAAA,UAAU,EAAE;AAJ6C,GAAD,CAA1D;AAOA,QAAMC,YAAY,GAAGhB,MAAM,EAA3B;AACA,QAAMiB,cAAc,GAAGjB,MAAM,EAA7B;AACA,QAAMkB,cAAc,GAAGlB,MAAM,EAA7B;AACA,QAAMmB,YAAY,GAAGnB,MAAM,EAA3B;;AAEA,QAAMoB,cAAc,GAAIC,KAAD,IAAW;AAChCA,IAAAA,KAAK,CAACC,cAAN,GADgC,CAGhC;AACA;;AACA,UAAMC,WAAW,GAAGP,YAAY,CAACQ,OAAb,CAAqBpB,KAAzC;AACA,UAAMqB,aAAa,GAAGR,cAAc,CAACO,OAAf,CAAuBpB,KAA7C;AACA,UAAMsB,iBAAiB,GAAGR,cAAc,CAACM,OAAf,CAAuBpB,KAAjD;AACA,UAAMuB,WAAW,GAAGR,YAAY,CAACK,OAAb,CAAqBpB,KAAzC;AAEA,UAAMwB,kBAAkB,GAAG,CAACzB,OAAO,CAACoB,WAAD,CAAnC;AACA,UAAMM,oBAAoB,GAAG,CAAC1B,OAAO,CAACsB,aAAD,CAArC;AACA,UAAMK,wBAAwB,GAAG,CAACxB,WAAW,CAACoB,iBAAD,CAA7C;AACA,UAAMK,kBAAkB,GAAG,CAAC5B,OAAO,CAACwB,WAAD,CAAnC;AAEAhB,IAAAA,oBAAoB,CAAC;AACnBC,MAAAA,IAAI,EAAEgB,kBADa;AAEnBf,MAAAA,MAAM,EAAEgB,oBAFW;AAGnBf,MAAAA,IAAI,EAAEiB,kBAHa;AAInBC,MAAAA,MAAM,EAAEF;AAJW,KAAD,CAApB;AAOA,UAAMG,WAAW,GACfL,kBAAkB,IAClBC,oBADA,IAEAC,wBAFA,IAGAC,kBAJF;;AAMA,QAAIE,WAAJ,EAAiB;AACf;AACD,KA9B+B,CAgChC;;AACD,GAjCD;;AAmCA,QAAMC,kBAAkB,GAAI,GAAEhC,MAAM,CAACiC,OAAQ;AAC/C,IAAIzB,iBAAiB,CAACE,IAAlB,GAAyB,EAAzB,GAA8BV,MAAM,CAACkC,OAAQ,EAD/C;AAGA,QAAMC,oBAAoB,GAAI,GAAEnC,MAAM,CAACiC,OAAQ;AACjD,IAAIzB,iBAAiB,CAACG,MAAlB,GAA2B,EAA3B,GAAgCX,MAAM,CAACkC,OAAQ,EADjD;AAGA,QAAME,wBAAwB,GAAI,GAAEpC,MAAM,CAACiC,OAAQ;AACrD,IAAIzB,iBAAiB,CAACK,UAAlB,GAA+B,EAA/B,GAAoCb,MAAM,CAACkC,OAAQ,EADrD;AAGA,QAAMG,kBAAkB,GAAI,GAAErC,MAAM,CAACiC,OAAQ;AAC/C,IAAIzB,iBAAiB,CAACI,IAAlB,GAAyB,EAAzB,GAA8BZ,MAAM,CAACkC,OAAQ,EAD/C;AAIA;AAAA;AACE;AACA;AAAM,MAAA,SAAS,EAAElC,MAAM,CAACsC,IAAxB;AAA8B,MAAA,QAAQ,EAAEpB,cAAxC;AAAA,8BACE;AAAK,QAAA,SAAS,EAAEc,kBAAhB;AAAA,gCACE;AAAO,UAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,EAAE,EAAC,MAAtB;AAA6B,UAAA,GAAG,EAAElB;AAAlC;AAAA;AAAA;AAAA;AAAA,gBAFF,EAKG,CAACN,iBAAiB,CAACE,IAAnB,iBAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAL9B;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eASE;AAAK,QAAA,SAAS,EAAEyB,oBAAhB;AAAA,gCACE;AAAO,UAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,EAAE,EAAC,QAAtB;AAA+B,UAAA,GAAG,EAAEpB;AAApC;AAAA;AAAA;AAAA;AAAA,gBAFF,EAGG,CAACP,iBAAiB,CAACG,MAAnB,iBAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHhC;AAAA;AAAA;AAAA;AAAA;AAAA,cATF,eAeE;AAAK,QAAA,SAAS,EAAEyB,wBAAhB;AAAA,gCACE;AAAO,UAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,EAAE,EAAC,QAAtB;AAA+B,UAAA,GAAG,EAAEpB;AAApC;AAAA;AAAA;AAAA;AAAA,gBAFF,EAGG,CAACR,iBAAiB,CAACK,UAAnB,iBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAfF,eAsBE;AAAK,QAAA,SAAS,EAAEwB,kBAAhB;AAAA,gCACE;AAAO,UAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,EAAE,EAAC,MAAtB;AAA6B,UAAA,GAAG,EAAEpB;AAAlC;AAAA;AAAA;AAAA;AAAA,gBAFF,EAGG,CAACT,iBAAiB,CAACI,IAAnB,iBAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAH9B;AAAA;AAAA;AAAA;AAAA;AAAA,cAtBF,eA4BE;AAAK,QAAA,SAAS,EAAEZ,MAAM,CAACuC,OAAvB;AAAA,gCAEE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,OAAO,EAAEhC,KAAK,CAACiC,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cA5BF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAqCD,CAlGD;;GAAMlC,Q;;KAAAA,Q;AAoGN,eAAeA,QAAf","sourcesContent":["import { useRef, useState } from 'react';\n\nimport styles from './Checkout.module.css';\n\n\n// get value and return true if value is empty. \n//using \"trim\" (white space) to check if the input is empty\nconst isEmpty = (value) => value.trim() === '';\n\n//to check if the input have 5 characters for the zip code\nconst isFiveChars = (value) => value.trim().length === 5;\n\nconst Checkout = (props) => {\n  const [formInputValidity, setFormInputValidity] = useState({\n    name: true,\n    street: true,\n    city: true,\n    postalCode: true\n  });\n\n  const nameInputRef = useRef();\n  const streetInputRef = useRef();\n  const postalInputRef = useRef();\n  const cityInputRef = useRef();\n\n  const confirmHandler = (event) => {\n    event.preventDefault();\n\n    // the \"current\" will give you access to the actual value stored\n    // in the ref, this this case, it's the input element\n    const enteredName = nameInputRef.current.value;\n    const enteredStreet = streetInputRef.current.value;\n    const enteredPostalCode = postalInputRef.current.value;\n    const enteredCity = cityInputRef.current.value;\n\n    const enteredNameIsValid = !isEmpty(enteredName);\n    const enteredStreetIsValid = !isEmpty(enteredStreet);\n    const enteredPostalCodeIsValid = !isFiveChars(enteredPostalCode);\n    const enteredCityIsValid = !isEmpty(enteredCity);\n\n    setFormInputValidity({\n      name: enteredNameIsValid,\n      street: enteredStreetIsValid,\n      city: enteredCityIsValid,\n      postal: enteredPostalCodeIsValid,\n    });\n\n    const formIsValid =\n      enteredNameIsValid &&\n      enteredStreetIsValid &&\n      enteredPostalCodeIsValid &&\n      enteredCityIsValid;\n\n    if (formIsValid) {\n      return;\n    }\n\n    //submit the cart data \n  };\n\n  const nameControlClasses = `${styles.control} \n  ${formInputValidity.name ? '' : styles.invalid}`;\n\n  const streetControlClasses = `${styles.control} \n  ${formInputValidity.street ? '' : styles.invalid}`;\n\n  const postalCodeControlClasses = `${styles.control} \n  ${formInputValidity.postalCode ? '' : styles.invalid}`;\n\n  const cityControlClasses = `${styles.control} \n  ${formInputValidity.city ? '' : styles.invalid}`;\n\n\n  return (\n    // onSubmit: when click on Submit button, the data will be sent\n    <form className={styles.form} onSubmit={confirmHandler}>\n      <div className={nameControlClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input type='text' id='name' ref={nameInputRef} />\n        {/* if the form input validity is not true then \n        => message: please enter your name */}\n        {!formInputValidity.name && <p>Please enter your name! </p>}\n      </div>\n\n      <div className={streetControlClasses}>\n        <label htmlFor='street'> Street</label>\n        <input type='text' id='street' ref={streetInputRef} />\n        {!formInputValidity.street && <p>Please enter a valid street! </p>}\n      </div>\n\n      <div className={postalCodeControlClasses}>\n        <label htmlFor='postal'> Postal Code</label>\n        <input type='text' id='postal' ref={postalInputRef} />\n        {!formInputValidity.postalCode &&\n          <p>Please enter a valid postal code (5 characters long)! </p>}\n      </div>\n\n      <div className={cityControlClasses}>\n        <label htmlFor='city'> City</label>\n        <input type='text' id='city' ref={cityInputRef} />\n        {!formInputValidity.city && <p>Please enter a valid city! </p>}\n      </div>\n\n      <div className={styles.actions}>\n        {/* when clicking the cancel button, the modal will be closed */}\n        <button type=\"button\" onClick={props.onCancel}>Cancel</button>\n        <button>Confirm</button>\n      </div>\n    </form>\n  )\n};\n\nexport default Checkout;"]},"metadata":{},"sourceType":"module"}